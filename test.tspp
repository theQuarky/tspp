// // test.tspp - Sample TSPP code demonstrating grammar rules

// // --- 1. Program Structure ---
// // Attributes demonstrated on declarations below
// let globalVar: int; // Top-level variable declaration

// namespace MyNamespace {
//     // --- 2. Memory Management and Types ---
//     #stack let stackVar: int = 10; // StorageClass Attribute
//     #heap let heapVar: float = 3.14; // StorageClass Attribute
//     #static let staticVar: bool = true; // StorageClass Attribute

//     let basicType: int;
//     let unionType: int | string; // UnionType
//     let arrayType: float[]; // ArrayType (unsized)
//     let sizedArray: bool[4]; // ArrayType (sized)
//     let rawPtr: int@; // PointerType (raw)
//     let unsafePtr: int@unsafe; // PointerType with modifier
//     let alignedPtr: float@aligned(16); // PointerType with modifier and arg
//     let refType: string&; // ReferenceType
//     let sharedPtr: #shared<MyClass>;
//     let uniquePtr: #unique<AnotherClass> ;
//     let weakPtr: #weak<MyClass>;

//     let qualifiedNameVar: MyNamespace.InnerClass; // QualifiedName
// }

// // // --- 3. Functions and Parameters ---
// // need to work on `ref p3: T`
// #inline #unsafe #simd #target("x86") function complexFunction<T extends number, U>(p1: int, const p2: string = "default", ref p3: int): float throws ErrorType { 
//     return 0.0; 
// }

// function simpleFunc(a: int): void { // Basic function declaration
//     // ...
// }

// // // --- 4. Classes and Interfaces ---
// #aligned #packed #abstract class MyClass<T> extends BaseClass implements Interface1, Interface2 {
    
//     public let field1: int; // Added 'let' for mutable field
//     private const field2: #shared<string>; // Added 'const' (assuming intended immutability)
//     protected let field3: float = 1.0; // Added 'let' for mutable field with initializer

//     #inline constructor(arg: int) { 
//         this.field1 = arg;
//     }

//     #virtual public function method1(p: T): bool { // Method syntax appears correct
//         return true;
//     }

//     private function method2(): void { // Method syntax appears correct
//         // ...
//     }

//     get myProp(): int { return this.field1; } // Getter syntax appears correct
//     set myProp(value: int) { this.field1 = value; } // Setter syntax appears correct
// }

// #zerocast interface Interface1<T> extends BaseInterface { // InterfaceDecl, GenericParams, extends
//     methodSignature(p1: T): int; // InterfaceMember (MethodSignature)
//     getProperty(): string; // InterfaceMember (PropertySignature - getter implied)
//     setProperty(value: string): void; // InterfaceMember (PropertySignature - setter implied)
// }

// class AnotherClass {} // Basic ClassDecl
// class BaseClass {}
// interface BaseInterface {}
// class ErrorType {}
// namespace MyNamespace { class InnerClass{} } // Nested Namespace/Class structure

// // // --- 5. Control Flow and Statements ---
// function controlFlowExample(n: int): void {
//     let x: int = n + 5; // ExprStmt (via DeclarationStmt)

//     { // Block Statement
//         let y: int = 10;
//     }

//     if (x > 10) { // IfStmt
//         simpleFunc(x);
//     } else if (x < 0) {
//         simpleFunc(0);
//     } else {
//         simpleFunc(5);
//     }

//     // switch (x % 3) { // SwitchStmt
//     //     case 0: // SwitchCase (case)
//     //         break;
//     //     case 1:
//     //     case 2:
//     //         simpleFunc(1);
//     //         break;
//     //     default: // SwitchCase (default)
//     //         simpleFunc(-1);
//     // }

//     // while (x > 0) { // WhileStmt
//     //     x = x - 1;
//     // }

//     // do { // DoWhileStmt
//     //     x = x + 1;
//     // } while (x < 5);

//     // for (let i: int = 0; i < 10; i = i + 1) { // ForStmt
//     //     simpleFunc(i);
//     // }

//     // let arr: int[] = [1, 2, 3];
//     // for (const item of arr) { // ForEachStmt
//     //     simpleFunc(item);
//     // }

//     // try { // TryStmt
//     //     complexFunction<int, string>(1, "test", 5);
//     // } catch (e: ErrorType) { // CatchClause
//     //     simpleFunc(0);
//     // } finally { // FinallyClause
//     //     simpleFunc(-1);
//     // }

//     // return x; // JumpStmt (return)
//     // break;    // JumpStmt (break)
//     // continue; // JumpStmt (continue)
//     // throw new ErrorType(); // JumpStmt (throw)

//     // #asm("mov eax, 1", "constraint1"); // AssemblyStmt with AsmConstraint
// }

// // // // --- 6. Expressions ---
// function expressionExamples(): void {
//     let a: int = 10;
//     let b: int = 20;
//     let c: bool;

//     a = b; // AssignmentExpr (=)
//     a += 5; // AssignmentExpr (+=)
//     c = a < b;  // RelationalExpr (<)
//     c = a >= 10; // RelationalExpr (>=)

//     c = a == b; // EqualityExpr (==)
//     c = a != 15; // EqualityExpr (!=)

//     a = b + 5; // AdditiveExpr (+)
//     a = a - 3; // AdditiveExpr (-)

//     a = b * 2; // MultiplicativeExpr (*)
//     a = b / 4; // MultiplicativeExpr (/)
//     a = b % 3; // MultiplicativeExpr (%)

//     a = -b;      // UnaryExpr (prefix -)
//     c = !c;      // UnaryExpr (prefix !)
//     a = ++b;     // UnaryExpr (prefix ++)
//     a = b++;     // UnaryExpr (postfix ++)
//     a = --b;     // UnaryExpr (prefix --)
//     a = b--;     // UnaryExpr (postfix --)

//     // let ptrVar: int@;
//     // ptrVar = @a; // PointerExpr (Address-of @)
//     // b = *ptrVar; // PointerExpr (Dereference *) - Assuming * for deref based on context
//     // let obj: MyClass<int>;
//     // let memberVal = obj.field1; // PostfixExpr (member access .)
//     // let ptrObj: MyClass<int>@;

//     // let arrLit: int[] = [1, 2, 3]; // PrimaryExpr (ArrayLiteral)
//     // let arrVal = arrLit[1];     // PostfixExpr (index access [])

//     simpleFunc(a);             // PostfixExpr (function call)
//     // complexFunction<int, string>(a, "hello", b); // PostfixExpr (generic function call <>)

//     // let thisVal = this; // PrimaryExpr (this) - only valid inside class methods

//     const compileTimeVal = 10 * 2; // CompileTimeExpr (#const)

//     let numLiteral = 123;
//     let hexLiteral = 0xFF;
//     let binLiteral = 0b101;
//     let floatLiteral = 1.23e4;
//     let strLiteral = "hello \"world\"";
//     let boolLiteral = true;
//     let parenExpr = (a + b) * 2; // PrimaryExpr (parenthesized expression)
//     let charLiteral = "a"; // CharacterLiteral

//     // c = (a > b) ? true : false; // ConditionalExpr

//     // c = a > 5 && b < 30; // LogicalAndExpr
//     // c = a < 0 || b > 0;  // LogicalOrExpr

//     // a = b | 1;  // BitwiseOrExpr
//     // a = b ^ 2;  // BitwiseXorExpr
//     // a = b & 3;  // BitwiseAndExpr

//     // a = b << 1; // ShiftExpr (<<)
//     // a = b >> 2; // ShiftExpr (>>)

//     // let castVar = cast<float>a; // PointerExpr (cast) - Grammar uses 'cast', assuming syntax

//     // memberVal = ptrObj@field1; // PostfixExpr (member access @) - Grammar shows this

//     // let newObj = new MyClass<int>(42); // PrimaryExpr (new expression)


//     // #sizeof<int>; // CompileTimeExpr (#sizeof)
//     // #alignof<MyClass<int>>; // CompileTimeExpr (#alignof)
//     // #typeof(a); // CompileTimeExpr (#typeof)

//     // // Literals (PrimaryExpr)
//     // let nullLiteral = null;
//     // let undefLiteral = undefined;

// }


// Global variables
// let globalCounter: int = 42;

// // Function declarations
// function add(a: int, b: int): int {
//     return a + b;
// }

// function main(): int {
//     let local = 10;
//     let result = add(local, globalCounter);
    
//     // Assembly statement
//     #asm("printf(\"Hello, World!\\n\")");   
//     return result;
// }